{"version":3,"sources":["components/Header.jsx","components/Album.jsx","components/Main.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","collapsed","toggleNavbar","socialLinks","react_default","a","createElement","reactstrap_es","color","dark","isOpen","navbar","sm","md","className","offset","map","link","key","href","url","target","rel","text","onClick","Album","album","item","top","width","src","alt","altText","description","style","textAlign","outlineStyle","outlineColor","opacity","class","time","Main","totalNumberOfAnimals","calgaryNumberOfAnimals","isLoaded","role","hidden","components_Album","Footer","props","Example","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","albumItems","setState","_this2","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","grant_type","client_id","client_secret","then","res","json","result","Headers","Authorization","access_token","objectSpread","pagination","total_count","catch","components_Header","components_Main","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","App_Example","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5964f4eb.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Col,\n    Collapse,\n    Container,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Row\n} from 'reactstrap';\n\nconst Header = ({ collapsed, toggleNavbar, socialLinks }) => {\n    return (\n        <header >\n            <Navbar  color=\"dark\" dark >\n                <Container >\n                    <Collapse isOpen={!collapsed} navbar>\n                        <Row>\n                            <Col sm=\"8\" md=\"7\" className=\"py-4\">\n                                {/* <h4 className=\"text-white\">About</h4> */}\n                                <p className=\"text-muted\">\n                                    HERE YOU CAN SEE A LIST OF SHELTER TO FIND YOU FOREVER BUDDY!\n                                </p>\n                            </Col>\n                            <Col sm=\"4\" md={{ offset: 1 }} className=\"py-4\">\n                                {/* <h4 className=\"text-white\">Contact</h4> */}\n                                <ul className=\"list-unstyled\">\n                                    {socialLinks.map((link, key) => {\n                                        return (\n                                            <li key={key}>\n                                                <a\n                                                    href={link.url}\n                                                    className=\"text-white\"\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                >\n                                                    {link.text}\n                                                </a>\n                                            </li>\n                                        );\n                                    })}\n                                </ul>\n                            </Col>\n                        </Row>\n                    </Collapse>\n                    <NavbarBrand \n                        href=\"/\"\n                        className=\"d-flex align-items-center mr-auto\"\n                    >\n                        {/* <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"20\"\n                            height=\"20\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className=\"mr-2\"\n                        >\n                            <path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\" />\n                            <circle cx=\"12\" cy=\"13\" r=\"4\" />\n                        </svg>\n                        <strong>Album</strong> */}\n                    </NavbarBrand>\n                    <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n                </Container>\n            </Navbar>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n    \n    ButtonGroup,\n    Card,\n    CardImg,\n    CardText,\n    CardBody,\n    Col,\n    Container,\n    Row\n} from 'reactstrap';\n\n\nconst Album = ({ album }) => {\n    return (\n        <div className=\"album py-5 bg-light\">\n            <Container>\n                <Row>\n                    {album.map((item, key) => {\n                        return (\n                            <Col md=\"4\" key={key}>\n                                <Card className=\"mb-4 box-shadow\">\n                                    <CardImg\n                                        top\n                                        width=\"100%\"\n                                        src={item.src}\n                                        alt={item.altText}\n                                    />\n                                    <CardBody>\n                                        <CardText>{item.description}</CardText>\n                                        <div className=\"d-flex justify-content-between align-items-center\">\n                                            <ButtonGroup>\n                                              \n                                            <a style={{textAlign:\"center\", outlineStyle:\"solid\" ,outlineColor:\"gray\", opacity:\"0.5\"}} href={item.href} class=\"btn\" target=\"_blank\" rel=\"noopener noreferrer\">View</a>\n                                                \n                                            </ButtonGroup>\n                                            <small className=\"text-muted\">\n                                                {item.time}\n                                            </small>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default Album;\n","import React from 'react';\nimport Album from './Album';\nimport {  Container, Jumbotron } from 'reactstrap';\n\nconst Main = ({ album, totalNumberOfAnimals, calgaryNumberOfAnimals, isLoaded }) => {\n\n    return (\n        <main role=\"main\">\n            <Jumbotron className=\"text-center\">\n        \n                <Container >\n                    <h1 className=\"jumbotron-heading\">There are at least</h1>\n                    <h1 className=\"jumbotron-heading2\" hidden={!isLoaded}>{totalNumberOfAnimals}</h1>\n                    <div class=\"loading\" hidden={isLoaded}><h1>Loading&#8230;</h1></div>\n                    <h1 className=\"jumbotron-heading\">pets avaible for adoption in North America.</h1>\n                    <h1 className=\"jumbotron-heading2\" hidden={!isLoaded}>{calgaryNumberOfAnimals}</h1>\n                    <h1 className=\"jumbotron-heading\">of them are in Calgary.</h1>\n                    <p className=\"lead text-muted\">\n                        According to Petfinder.\n                    </p>\n                    <h1 className=\"jumbotron-heading\">Check out some shelters in the City</h1>\n                </Container>\n            </Jumbotron>\n            <Album album={album} />\n        </main>\n    );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Container } from 'reactstrap';\n\nconst Footer = props => {\n    return (\n        <footer className=\"text-muted\">\n            <Container>\n                <p className=\"float-right\">\n                    <a href=\"/\">Back to top</a>\n                </p>\n                <p>\n                    COMIT PROJECT ASSIGNMENT.\n                </p>\n                \n            </Container>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport albumItems from './data/album';\nimport socialLinks from './data/socialLinks';\nimport './App.css';\n\n\n\nexport default class Example extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true,\n            socialLinks: socialLinks,\n            album: albumItems,\n            totalNumberOfAnimals: 0,\n            calgaryNumberOfAnimals: 0,\n            isLoaded: false\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n\n    componentDidMount() {\n    fetch('https://api.petfinder.com/v2/oauth2/token', { \n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \"grant_type\": \"client_credentials\", \"client_id\": \"U1CKZeFgMZr3lM2nPydnTAQXXISqNab1QRTEwwxQviDqsMi7tb\", \"client_secret\": \"i70Hc6IzXEj86GaCnNv8WN5HoplvVsVuA6WYuMdd\" }),\n              })  \n      .then(res => res.json())\n      .then(\n        (result) => {\n            fetch('https://api.petfinder.com/v2/animals', { \n                method: 'GET', \n                headers: new Headers({\n                  'Authorization': 'Bearer '+result.access_token, \n                  \n                })\n              })\n              .then(res => res.json())\n              .then(\n                  (result) => {\n                      this.setState({...this.state, totalNumberOfAnimals: result.pagination.total_count, isLoaded: true});\n\n                  }\n              )\n              .catch(() => this.setState({...this.state, isLoaded: false}))\n\n              fetch('https://api.petfinder.com/v2/animals?location=Calgary%2C+Alberta%2C+Canada&distance=100', { \n                method: 'GET', \n                headers: new Headers({\n                  'Authorization': 'Bearer '+result.access_token, \n                  \n                })\n              })\n              .then(res => res.json())\n              .then(\n                  (result) => {\n                      this.setState({...this.state, calgaryNumberOfAnimals: result.pagination.total_count, isLoaded: true});\n\n                  }\n              )\n              .catch(() => this.setState({...this.state, isLoaded: false}))\n        \n        }\n      )\n      .catch(() => this.setState({...this.state, isLoaded: false}));\n    }\n\n    render() {\n        return (\n            <div>\n                <Header\n                    collapsed={this.state.collapsed}\n                    toggleNavbar={this.toggleNavbar}\n                    socialLinks={this.state.socialLinks}\n                />\n                <Main\n                album={this.state.album}\n                totalNumberOfAnimals={this.state.totalNumberOfAnimals}\n                calgaryNumberOfAnimals={this.state.calgaryNumberOfAnimals}\n                isLoaded={this.state.isLoaded} />\n                <Footer />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n<App/> \n    </BrowserRouter>\n, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}